删除文件
从版本库中删除该文件
$ git rm <file>
$ git commit

把误删的文件还原
$ git checkout -- <file>


远程仓库(GitHub仓库)
创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"
用户主目录里找到.ssh目录
id_rsa是私钥，id_rsa.pub是公钥

GitHub添加SSH Key
id_rsa.pub文件的内容

在GitHub创建一个新的仓库
关联一个远程库
$ git remote add origin git@github.com:laborclx/Git.git
远程库的名字就是origin，这是Git默认的叫法

把本地库的所有内容推送到远程库上
$ git push -u origin master
加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
$ git push origin master


从远程库克隆
$ git clone 

创建dev分支
$ git checkout -b dev
-b参数表示创建并切换,相当于
$ git branch dev
$ git checkout dev
列出所有分支，当前分支前面会标一个*号
$ git branch
在当前分支中修改一个文件内容
添加 $ git add <file>
提交 $ git commit
切换到 master 分支
合并分支
$ git merge dev
删除dev分支
$ git branch -d dev

用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev

把当前工作现场“储藏”起来
$ git stash
查看工作现场的存储列表
$ git stash list
恢复
1-----$ git stash apply stash@{0}  //恢复
      $ git stash drop   //删除
2-----$ git stash pop   //恢复的同时把stash内容删除

强行删除分支(新建分支未与其他分支合并)
$ git branch -D <branch-name>

多人协作
查看远程库的信息
$ git remote
显示更详细的信息
$ git remote -v
可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

推送分支
把该分支上的所有本地提交推送到远程库
$ git push origin master
创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev

推送的提交有冲突
用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
$ git pull
在pull如果失败，说明没有指定本地dev分支与远程origin/dev分支的链接
$ git branch --set-upstream dev origin/dev
$ git pull
多人协作的工作模式
$ git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
$ git pull
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name
如果git pull提示“no tracking information”，
说明本地分支和远程分支的链接关系没有创建，
$ git branch --set-upstream branch-name origin/branch-name。


创建标签
$ git tag <tagname>
查看所有标签
$ git tag
找到历史提交的commit id加上tag
$ git tag <tagname> <commit id>
查看标签信息
$ git show <tagname>
创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a <tagname> -m "xxxx" <commit id>
用PGP签名标签
$ git tag -s <tagname> -m "xxxx" <commit id>
删除标签
$ git tag -d <tagname>
推送某个标签到远程
$ git push origin <tagname>
一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags
如果标签已经推送到远程，要删除远程标签，先从本地删除：
$ git tag -d <tagname>
$ git push origin :refs/tags/<tagname>


自定义Git
如颜色color： $ git config --global color.ui true

配置别名
$ git config --global alias.st status
......
